type Query {
  getUserByUsername(username: String!): User!
  getUserById(id: ID!): User!
  searchAudio(input: searchAudioInput!): SearchResult
  getTrackById(input: getTrackInput!): Track
  getAlbumById(input: getAlbumInput!): Album
  getArtistById(input: getArtistInput!): Artist
}

type Mutation {
  signUp(input: signUpInput!): User!
}

input signUpInput {
  email: String!
  password: String!
}

input signInInput {
  email: String!
  password: String!
}

input searchAudioInput {
  text: String!
  type: String!
}
input getTrackInput {
  id: ID!
}
input getAlbumInput {
  id: ID!
}
input getArtistInput {
  id: ID!
}
type User {
  id: ID!
  username: String!
  email: String!
  password: String
  fullName: String
  isActive: Boolean!
  createdAt: String
  updatedAt: String
  role: Role
}

type Role {
  id: ID!
  name: String!
  createdAt: String
  updatedAt: String
  users: [User!]
}

type Permission {
  id: ID!
  scope: String!
  description: String!
  createdAt: String
  updatedAt: String
  roles: [Role]
}

type Role_Permission {
  roleId: String!
  permissionId: String!
  createdAt: String
  updatedAt: String
  role: Role!
  permission: Permission!
}

type Images {
  url: String!
  height: Int!
  width: Int!
}

type Followers {
  href: String
  total: Int
}

type ExternalUrls {
  spotify: String
}

type ExternalIds {
  isrc: String
}

type Artist {
  href: String
  id: ID!
  name: String!
  popularity: Int
  type: String
  uri: String
  images: [Images]!
  genres: [String]
  followers: Followers
  external_urls: ExternalUrls
}

type Artists {
  href: String
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
  items: [Artist]
}

type Album {
  album_type: String!
  total_tracks: Int!
  href: String!
  id: ID!
  name: String!
  release_date: String!
  release_date_precision: String
  type: String
  uri: String
  artists: [Artist]
  images: [Images]!
  external_urls: ExternalUrls
  available_markets: [String]
}

type Albums {
  href: String!
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
  items: [Album]!
}

type Track {
  disc_number: Int
  duration_ms: Int
  explicit: Boolean
  href: String
  id: ID!
  is_local: Boolean
  is_playable: Boolean
  name: String!
  popularity: Int
  preview_url: String
  track_number: Int
  type: String
  uri: String
  external_urls: ExternalUrls
  external_ids: ExternalIds
  available_markets: [String]
  artists: [Artist]
  album: Album
}

type Tracks {
  href: String
  limit: Int
  next: String
  offset: Int
  previous: String
  total: Int
  items: [Track]!
}

type SearchResult {
  tracks: Tracks
  albums: Albums
  artists: Artists
}
