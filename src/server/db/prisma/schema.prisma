generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                      String        @id @default(cuid())
  username                String?       @unique
  email                   String        @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  isActive                Boolean       @default(true)
  name                    String?       @default("")
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt  @default(now())
  accounts      Account[]
  sessions      Session[]
  roleId                  String?
  role                    Role?         @relation(fields: [roleId], references: [id])
}

model Role {
  id                      String        @id @default(cuid())
  name                    String        @unique
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt  @default(now())
  permissions             RolePermission[]
  users                   User[]
}

model Permission {
  id                      String         @id @default(cuid())
  scope                   String         @unique
  description             String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt  @default(now())
  roles                   RolePermission[]
}

model RolePermission {
  roleId                  String
  permissionId            String
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt  @default(now())
  role                    Role           @relation(fields: [roleId], references: [id])
  permission              Permission     @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
}